nclude<stdio.h>
#include<stdlib.h>
#include<string.h>
#define NODE struct node
void insert();
void list();
void show_dept();
int check_duplicate();
void remve();
void showInfo();


union injuries
{     
       	float fever;
        char kindOfPain[20];
       	int numDaysSick;
};

struct node
{
        char entryName[20];
        int deptNum;
	union injuries injury;
	NODE *next;	
	NODE *prev;
};


struct node *head = NULL;
struct node *tail = NULL;

int main(void)
{	
	int x = 0;
	while(x == 0)
	{
		printf("\nType 0 to quit.\nType 1 to add to the waiting list.\nType 2 to see the waiting list.\nType 3 to remove the oldest entry in a department\nType 4 to show the entries in a department\nType 5 to find a person's info.\n:");
		int opt;
		scanf("%d",&opt);
		switch(opt)
		{
			case 1:
			{
				char name[20];
				int dept = 0;
				union injuries u;
				printf("What is the name?\n");
				scanf("%s",name);
				printf("What is the department?\n");
				scanf("%i",&dept);
				if(dept == 1)
				{
					printf("How high is the fever?\n");
					scanf("%f",&u.fever);
				}
                                if(dept == 2)
                                {
                                        printf("What kind of pain is it?\n");
                                        scanf("%s",u.kindOfPain);
                                }
                                if(dept == 3 || dept == 4)
                                {
					printf("How many days have you been sick?\n");
					scanf("%d",&u.numDaysSick);
                                }
				insert(dept,name,u);
				break;
			}
			case 2:
			{
				list();			
				break;
			}
			case 3:
			{
				remve();
				break;
			}
			case 4:
			{
				show_dept();
				break;
			}
			case 5:
			{
				char name[20];
				printf("Who's info would you like to see?\n");
				scanf("%s",name);
				showInfo(name);
				break;
			}
			case 0:
			{
				return 0;
			}
		}
	}
	return 0;
}

void showInfo(char name[]) //Shows the info of one person on the list
{
	if(check_duplicate(name) == 1)
	{
		printf("That person is not on the list!\n");
		return;
	}	
        struct node *current = head;
        while(current !=NULL)
        {
                if(strcmp(current->entryName,name) == 0)
                {
                        if(current->deptNum == 3 || current->deptNum == 4)
                        {
                                printf("%s    -    %d    -    %i\n", current->entryName, current->deptNum,current->injury.numDaysSick);
                        }
                        if(current->deptNum == 2)
                        {
                                printf("%s    -    %d    -    %s\n", current->entryName, current->deptNum,current->injury.kindOfPain);
                        }
                        if(current->deptNum == 1)
                        {
                                printf("%s    -    %d    -    %f\n", current->entryName, current->deptNum,current->injury.fever);
                        }
                }
                current = current->next;
        }
	
}

void insert(int dept, char name[],union injuries u) //Inserts someone into the list
{
	if(dept != 1 && dept != 2 && dept != 3 && dept != 4) 
	{
		printf("Please choose a correct department!\n");
		return;
	}
	if(check_duplicate(name) == 0)
	{
		printf("Sorry that name was a duplicate\n");
		return;
	}
	struct node *current;
	current = (NODE*)malloc(sizeof(NODE));
	if(head == NULL)
	{
		head = current;
		tail = current;
		current->prev = NULL;
		current->next = NULL;
	}
	else
	{
		current->prev = tail;
		current->next = NULL;
		tail->next = current;
		tail = current;
	}
	current->injury.fever = u.fever;
	strcpy(current->injury.kindOfPain,u.kindOfPain);
	current->injury.numDaysSick = u.numDaysSick;	
	strcpy(current->entryName,name);
	current->deptNum = dept;
}

void list() //Lists everyone on the list
{
	printf("The list of names is...\n");
	struct node *current = head;
        while(current !=NULL)
        {	
		if(current->deptNum == 3 || current->deptNum == 4)
		{
			printf("%s    -    %d    -    %i\n", current->entryName, current->deptNum,current->injury.numDaysSick);
		}
                if(current->deptNum == 2)
                {
                        printf("%s    -    %d    -    %s\n", current->entryName, current->deptNum,current->injury.kindOfPain);
                }
                if(current->deptNum == 1)
                {
                        printf("%s    -    %d    -    %f\n", current->entryName, current->deptNum,current->injury.fever);
                }
		current = current->next;
	}
}

void show_dept() //Shows everyone in a certain department
{
	printf("Which department would you like to check?\n");
	int deptSelect;
	scanf("%d",&deptSelect);
	printf("The list of names in the %d department is:\n", deptSelect);
	struct node *current = head;
        while(current !=NULL)
        {

		if(current->deptNum == deptSelect)
		{
			if(current->deptNum == 3 || current->deptNum == 4)
                	{       
                	        printf("%s    -    %d    -    %i\n", current->entryName, current->deptNum,current->injury.numDaysSick);
                	}
                	if(current->deptNum == 2)
                	{       
                	        printf("%s    -    %d    -    %s\n", current->entryName, current->deptNum,current->injury.kindOfPain);
                	}
                	if(current->deptNum == 1)
                	{       
                	        printf("%s    -    %d    -    %f\n", current->entryName, current->deptNum,current->injury.fever);
                	}
		}
		current = current->next;	
	}
}

int check_duplicate(char name[]) //Checks if there are multiple names
{        
	struct node *current = head;
        while(current !=NULL)
        {
		int compare = strcmp(current->entryName,name);   
                if(compare == 0)
                {
                        return 0;
                }
		current=current->next;
        }
	return 1;
}	

void remve() //Removes the oldest entry from a department
{
	printf("Which department would you like to remove the oldest entry from?\n");
	int deptSelection;
	scanf("%d",&deptSelection);
	struct node *current = head;
        while(current !=NULL)
        {   
		if(current->deptNum == deptSelection)
		{
			if(head == tail)
				head = tail = NULL;
			else if(current == head)
			{
				head = head->next;
				head->prev = NULL;
			}
			else if(current == tail)
			{
				tail = tail->prev;
				tail->next = NULL;
			}
			else
			{
				current->prev->next = current->next;
				current->next->prev = current->prev;
				free(current);
			}
			return;	
		}
		current = current->next;	
	}
	printf("Nobody is in that department!");
}

